name: reusable_build_maturin_macos

on:
  workflow_dispatch:
    inputs:
      py_interface_folder:
        description: "Location of the py interface folder"
        required: true
        type: string
      deploy:
        description: "Determines if built python wheels should be deployed to PyPi"
        required: false
        default: false
        type: boolean
      universal2:
        description: "Determines if python wheels should be built with universal2 flag"
        required: false
        default: true
        type: boolean
      python_3_14:
        description: "Determines if python wheels should be built for Python 3.14"
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      py_interface_folder:
        description: "Location of the py interface folder"
        required: true
        type: string
      deploy:
        description: "Determines if built python wheels should be deployed to PyPi"
        required: false
        default: false
        type: boolean
      universal2:
        description: "Determines if python wheels should be built with universal2 flag"
        required: false
        default: true
        type: boolean
      python_3_14:
        description: "Determines if python wheels should be built for Python 3.14"
        required: false
        default: false
        type: boolean

jobs:
  maturin_build_macos:
    name: maturin_build_macos_${{ matrix.python.interpreter }}
    runs-on: 'macos-15'
    strategy:
      matrix:
        python: [
            { py: '3.10', interpreter: "python3.10" },
            { py: '3.11', interpreter: "python3.11" },
            { py: '3.12', interpreter: "python3.12" },
            { py: '3.13', interpreter: "python3.13" },
        ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python.py }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pytest numpy twine
          python -m pip install maturin
      - name: Set RUSTFLAGS and Build with universal2 Flag
        if: ${{ inputs.universal2 == 'true' }}
        run: |
            RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" \
            maturin build -i ${{ matrix.python.interpreter }} --out wheels  -m ${{inputs.py_interface_folder}}/Cargo.toml --release --locked --target universal2-apple-darwin
      - name: Set RUSTFLAGS and Build
        if: ${{ inputs.universal2 == 'false' }}
        run: |
            RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" \
            maturin build -i ${{ matrix.python.interpreter }} --out wheels  -m ${{inputs.py_interface_folder}}/Cargo.toml --release --locked
      - name: Store Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos_wheels_p_${{ matrix.python.py }}
          path: wheels
  
  maturin_build_macos_py314:
    if: ${{ inputs.python_3_14 }}
    name: maturin_build_macos_python3.14
    runs-on: 'macos-15'
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-python@v5
        with:
          python-version: '3.14'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip pytest numpy twine
          python -m pip install maturin setuptools
      - name: Set RUSTFLAGS and Build with universal2 Flag
        if: ${{ inputs.universal2 == 'true' }}
        run: |
            RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" \
            maturin build -i "python3.14" --out wheels  -m ${{ inputs.py_interface_folder }}/Cargo.toml --release --locked --target universal2-apple-darwin
      - name: Set RUSTFLAGS and Build
        if: ${{ inputs.universal2 == 'false' }}
        run: |
            RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" \
            maturin build -i "python3.14" --out wheels  -m ${{ inputs.py_interface_folder }}/Cargo.toml --release --locked
      - name: Store Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos_wheels_p_3.14
          path: wheels

  deploy:
    if: ${{ inputs.deploy }}
    needs: maturin_build_macos
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - uses: actions/download-artifact@v4
      with:
        path: wheels
        pattern: macos_wheels_p*
        merge-multiple: true        
    - name: Publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m pip install --upgrade pip
        pip install twine
        python -m twine upload --skip-existing wheels/*
