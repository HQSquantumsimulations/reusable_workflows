name: reusable_unittests_rust_pyo3

on:
  workflow_dispatch:
    inputs:
      windows:
        description: "Run unittests on windows"
        required: false
        default: false
        type: boolean
      macos:
        description: "Run unittests on macOS"
        required: false
        default: true
        type: boolean
      test_code_coverage:
        description: "Is the code coverage tested to be over 90 percent of lines"
        required: false
        default: true
        type: boolean
      rust_package_name:
        description: "Name of the pure rust package"
        required: true
        type: string
      rust_doc_package_name:
        description: "Name of the pure rust package to doctest"
        required: false
        type: string
      python_3_13:
        description: "Run unittest on Python 3.13"
        required: false
        default: true
        type: boolean
      features:
        description: "Additional features to be enabled for the Rust package separated with commas or whitespaces"
        required: false
        type: string
  workflow_call:
    inputs:
      windows:
        description: "Run unittests on windows"
        required: false
        default: false
        type: boolean
      macos:
        description: "Run unittests on macOS"
        required: false
        default: true
        type: boolean
      test_code_coverage:
        description: "Is the code coverage tested to be over 90 percent of lines"
        required: false
        default: true
        type: boolean
      rust_package_name:
        description: "Name of the pure rust package"
        required: true
        type: string
      rust_doc_package_name:
        description: "Name of the pure rust package to doctest"
        required: false
        type: string
      python_3_13:
        description: "Run unittest on Python 3.13"
        required: false
        default: true
        type: boolean
      features:
        description: "Additional features to be enabled for the Rust package separated with commas or whitespaces"
        required: false
        type: string
      pip_install:
        description: "Packages to install with pip before running tests"
        required: false
        type: string

jobs:
  unittests_check_windows:
    if: ${{ inputs.windows }}
    name: unittests_check_windows_${{ matrix.python.interpreter }}
    runs-on: "windows-latest"
    strategy:
      matrix:
        python:
          [
            { py: "3.9", interpreter: "python3.9" },
            { py: "3.10", interpreter: "python3.10" },
            { py: "3.11", interpreter: "python3.11" },
            { py: "3.12", interpreter: "python3.12" },
          ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python.py }}
      - run: |
          python -m pip install ${{ inputs.pip_install || 'numpy' }}
          cargo test --workspace --no-default-features --locked --features "${{ inputs.features || '' }}"

  unittests_check_windows_py313:
    if: ${{ inputs.windows && inputs.python_3_13 }}
    name: unittests_check_windows_py313
    runs-on: "windows-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - run: |
          python -m pip install ${{ inputs.pip_install || 'numpy' }}
          cargo test --workspace --no-default-features --locked --features "${{ inputs.features || '' }}"

  unittests_check_macos:
    if: ${{ inputs.macos }}
    name: unittests_check_macos_${{ matrix.python.interpreter }}
    runs-on: "macOS-13"
    strategy:
      matrix:
        python:
          [
            { py: "3.9", interpreter: "python3.9" },
            { py: "3.10", interpreter: "python3.10" },
            { py: "3.11", interpreter: "python3.11" },
            { py: "3.12", interpreter: "python3.12" },
          ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python.py }}
      - run: |
          python -m pip install ${{ inputs.pip_install || 'numpy' }}
          cargo test --workspace --no-default-features --locked --features "${{ inputs.features || '' }}"

  unittests_check_macos_py313:
    if: ${{ inputs.macos && inputs.python_3_13 }}
    name: unittests_check_macos_py313
    runs-on: "macOS-13"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - run: |
          python -m pip install ${{ inputs.pip_install || 'numpy' }}
          cargo test --workspace --no-default-features --locked --features "${{ inputs.features || '' }}"

  unittests_check_linux:
    name: unittests_check_linux_${{ matrix.python.interpreter }}
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python:
          [
            { py: "3.9", interpreter: "python3.9" },
            { py: "3.10", interpreter: "python3.10" },
            { py: "3.11", interpreter: "python3.11" },
            { py: "3.12", interpreter: "python3.12" },
          ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python.py }}
      - run: |
          python -m pip install ${{ inputs.pip_install || 'numpy' }}
          cargo test --workspace --no-default-features --locked --features "${{ inputs.features || '' }}"
          cargo fmt --all -- --check

  unittests_check_linux_py313:
    if: ${{ inputs.python_3_13 }}
    name: unittests_check_linux_py313
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - run: |
          python -m pip install ${{ inputs.pip_install || 'numpy' }}
          cargo test --workspace --no-default-features --locked --features "${{ inputs.features || '' }}"
          cargo fmt --all -- --check

  check_doctest:
    name: check_doctest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
      - name: Test with Coverage pytest
        if: ${{ inputs.rust_doc_package_name }}
        run: cargo test --doc --package=${{ inputs.rust_doc_package_name }} --features "${{ inputs.features || '' }}"
      - name: Test without Coverage pytest
        if: ${{ !inputs.rust_doc_package_name }}
        run: cargo test --doc --package=${{ inputs.rust_package_name }} --features "${{ inputs.features || '' }}"

  code_coverage_roqoqo:
    if: ${{ inputs.test_code_coverage }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview
          override: true
      - uses: taiki-e/install-action@cargo-llvm-cov
      - run: |
          cd ${{ inputs.rust_package_name }}
          cargo llvm-cov --no-default-features --lcov --output-path lcov_roqoqo.info --fail-under-lines=90
